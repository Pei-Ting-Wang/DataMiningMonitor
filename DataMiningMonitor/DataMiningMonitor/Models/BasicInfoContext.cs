// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.EntityFrameworkCore;
using System.Configuration;

namespace DataMiningMonitor.Models;

public partial class BasicInfoContext : DbContext
{
    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        optionsBuilder.UseSqlServer(ConfigurationManager.ConnectionStrings["BasicInfoConnectionStrings"].ConnectionString);
    }

    public virtual DbSet<DailyHitRate> DailyHitRates { get; set; }

    public virtual DbSet<DailyLimitPriceInfo> DailyLimitPriceInfos { get; set; }

    public virtual DbSet<DailyQuote> DailyQuotes { get; set; }

    public virtual DbSet<DailySeccoLeftLot> DailySeccoLeftLots { get; set; }

    public virtual DbSet<DailySpecialPidGroup> DailySpecialPidGroups { get; set; }

    public virtual DbSet<DailyStockInfo> DailyStockInfos { get; set; }

    public virtual DbSet<DailyThreeTraderDeal> DailyThreeTraderDeals { get; set; }

    public virtual DbSet<DailyWarrantCountInfo> DailyWarrantCountInfos { get; set; }

    public virtual DbSet<DailyWarrantInfo> DailyWarrantInfos { get; set; }

    public virtual DbSet<DailyWarrantMorningVol> DailyWarrantMorningVols { get; set; }

    public virtual DbSet<DailyWarrantVol> DailyWarrantVols { get; set; }

    public virtual DbSet<DividendHistoryTable> DividendHistoryTables { get; set; }

    public virtual DbSet<DividendNoticeTable> DividendNoticeTables { get; set; }

    public virtual DbSet<DividendTable> DividendTables { get; set; }

    public virtual DbSet<Holiday> Holidays { get; set; }

    public virtual DbSet<MsgToLineNotify> MsgToLineNotifies { get; set; }

    public virtual DbSet<RptLog> RptLogs { get; set; }

    public virtual DbSet<StockDealTest> StockDealTests { get; set; }

    public virtual DbSet<TwbrokerDeal> TwbrokerDeals { get; set; }

    public virtual DbSet<TwbrokerStockDeal> TwbrokerStockDeals { get; set; }

    public virtual DbSet<TwcalendarTable> TwcalendarTables { get; set; }

    public virtual DbSet<TwdealerDeal> TwdealerDeals { get; set; }

    public virtual DbSet<TwstockDayTradeDeal> TwstockDayTradeDeals { get; set; }

    public virtual DbSet<WarrantBayVolCount> WarrantBayVolCounts { get; set; }

    public virtual DbSet<WarrantInfo> WarrantInfos { get; set; }

    public virtual DbSet<WarrantSellVolCount> WarrantSellVolCounts { get; set; }

    public virtual DbSet<WarrantVolDaily> WarrantVolDailies { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<DailyHitRate>(entity =>
        {
            entity.HasKey(e => new { e.Date, e.Acno, e.SysId, e.SeccoName });

            entity.ToTable("DailyHitRate");

            entity.Property(e => e.Acno)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SysId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SysID");
            entity.Property(e => e.SeccoName)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DailyLimitPriceInfo>(entity =>
        {
            entity.HasKey(e => new { e.Date, e.Pid }).HasName("PK_LimitPriceInfo");

            entity.ToTable("DailyLimitPriceInfo");

            entity.Property(e => e.Pid)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DayTrade)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ExpiryDate)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IsOtc).HasColumnName("IsOTC");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DailyQuote>(entity =>
        {
            entity.HasKey(e => new { e.Date, e.Pid }).HasName("PK_Quote");

            entity.ToTable("DailyQuote");

            entity.Property(e => e.Pid)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DailySeccoLeftLot>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.Pid)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DailySpecialPidGroup>(entity =>
        {
            entity.HasKey(e => new { e.Date, e.Sysid, e.Pid }).HasName("PK_SpecialPidGroup");

            entity.ToTable("DailySpecialPidGroup");

            entity.Property(e => e.Sysid)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Pid)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DailyStockInfo>(entity =>
        {
            entity.HasKey(e => e.Pid).HasName("PK_StockInfo");

            entity.ToTable("DailyStockInfo");

            entity.Property(e => e.Pid)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Country)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Industry)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IsOtc).HasColumnName("IsOTC");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DailyThreeTraderDeal>(entity =>
        {
            entity.HasKey(e => new { e.Date, e.Pid });

            entity.ToTable("DailyThreeTraderDeal");

            entity.Property(e => e.Pid)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DailyWarrantCountInfo>(entity =>
        {
            entity.HasKey(e => new { e.Date, e.Pid });

            entity.ToTable("DailyWarrantCountInfo");

            entity.Property(e => e.Pid)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Er).HasColumnName("ER");
            entity.Property(e => e.Mp).HasColumnName("MP");
        });

        modelBuilder.Entity<DailyWarrantInfo>(entity =>
        {
            entity.HasKey(e => new { e.Date, e.Pid }).HasName("PK_WarrantInfo");

            entity.ToTable("DailyWarrantInfo");

            entity.Property(e => e.Pid)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.IsOtc).HasColumnName("IsOTC");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SeccoName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Underlying)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.UnderlyingName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DailyWarrantMorningVol>(entity =>
        {
            entity.HasKey(e => new { e.Date, e.Pid });

            entity.ToTable("DailyWarrantMorningVol");

            entity.Property(e => e.Pid)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DailyWarrantVol>(entity =>
        {
            entity.HasKey(e => new { e.Date, e.Pid });

            entity.ToTable("DailyWarrantVol");

            entity.Property(e => e.Pid)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DividendHistoryTable>(entity =>
        {
            entity.HasKey(e => new { e.Date, e.Pid });

            entity.ToTable("DividendHistoryTable");

            entity.Property(e => e.Pid)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Type)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DividendNoticeTable>(entity =>
        {
            entity.HasKey(e => new { e.Date, e.Pid });

            entity.ToTable("DividendNoticeTable");

            entity.Property(e => e.Pid)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Type)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DividendTable>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("DividendTable");

            entity.Property(e => e.Dividend).HasColumnName("dividend");
            entity.Property(e => e.DividendPrice).HasColumnName("dividendPrice");
            entity.Property(e => e.DividendQty).HasColumnName("dividendQty");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Pid)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Seoprice).HasColumnName("SEOPrice");
            entity.Property(e => e.Seoqty).HasColumnName("SEOQty");
        });

        modelBuilder.Entity<Holiday>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Holiday");

            entity.Property(e => e.Msg)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MsgToLineNotify>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MsgToLineNotify");

            entity.Property(e => e.InsertTime).HasColumnType("datetime");
            entity.Property(e => e.Msg)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.SysId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SysID");
        });

        modelBuilder.Entity<RptLog>(entity =>
        {
            entity.HasKey(e => new { e.Date, e.OrderNo, e.SysId, e.Acno });

            entity.ToTable("RptLog");

            entity.Property(e => e.OrderNo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SysId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SysID");
            entity.Property(e => e.Acno)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.OrderTime).HasColumnType("datetime");
            entity.Property(e => e.Pid)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SysIdno)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SysIDNo");
        });

        modelBuilder.Entity<StockDealTest>(entity =>
        {
            entity.HasKey(e => e.Seq);

            entity.ToTable("StockDealTest");

            entity.Property(e => e.Seq)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Acno)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Kind)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.OrderNo)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Pid)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SysId)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SysID");
            entity.Property(e => e.Time).HasColumnType("datetime");
        });

        modelBuilder.Entity<TwbrokerDeal>(entity =>
        {
            entity.HasKey(e => new { e.Date, e.Pid, e.BrokerId, e.Price });

            entity.ToTable("TWBrokerDeal");

            entity.Property(e => e.Pid)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BrokerId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Chinese_Taiwan_Stroke_CS_AS")
                .HasColumnName("BrokerID");
            entity.Property(e => e.Blotsum).HasColumnName("BLotsum");
            entity.Property(e => e.Broker)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Slotsum).HasColumnName("SLotsum");
            entity.Property(e => e.Underlying)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TwbrokerStockDeal>(entity =>
        {
            entity.HasKey(e => new { e.Date, e.Pid, e.BrokerId, e.Price });

            entity.ToTable("TWBrokerStockDeal");

            entity.Property(e => e.Pid)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BrokerId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Chinese_Taiwan_Stroke_CS_AS")
                .HasColumnName("BrokerID");
            entity.Property(e => e.Blotsum).HasColumnName("BLotsum");
            entity.Property(e => e.Slotsum).HasColumnName("SLotsum");
        });

        modelBuilder.Entity<TwcalendarTable>(entity =>
        {
            entity.HasKey(e => new { e.Date, e.Pid });

            entity.ToTable("TWCalendarTable");

            entity.Property(e => e.Pid)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Type)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TwdealerDeal>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TWDealerDeal");

            entity.Property(e => e.Blotsum).HasColumnName("BLotsum");
            entity.Property(e => e.Broker)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Pid)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Slotsum).HasColumnName("SLotsum");
            entity.Property(e => e.UnderlyingName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TwstockDayTradeDeal>(entity =>
        {
            entity.HasKey(e => new { e.Date, e.Pid });

            entity.ToTable("TWStockDayTradeDeal");

            entity.Property(e => e.Pid)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IsStopBefSell)
                .HasMaxLength(5)
                .IsUnicode(false);
        });

        modelBuilder.Entity<WarrantBayVolCount>(entity =>
        {
            entity.HasKey(e => new { e.Time, e.Pid });

            entity.ToTable("WarrantBayVolCount");

            entity.Property(e => e.Pid)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<WarrantInfo>(entity =>
        {
            entity.HasKey(e => e.Pid).HasName("PK_WarrantBasicInfo");

            entity.ToTable("WarrantInfo");

            entity.Property(e => e.Pid)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.IsOtc).HasColumnName("IsOTC");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SeccoName)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Type)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Underlying)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.UnderlyingName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UpdateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<WarrantSellVolCount>(entity =>
        {
            entity.HasKey(e => new { e.Time, e.Pid });

            entity.ToTable("WarrantSellVolCount");

            entity.Property(e => e.Pid)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<WarrantVolDaily>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("WarrantVolDaily");

            entity.Property(e => e.Pid)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}